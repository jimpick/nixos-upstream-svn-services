Prerequisites: the Subversion service is tested on Linux (i686-linux).
Nix itself also supports other platforms, but some packages may not
build or work properly.


Steps to get a running Subversion service (see http://svn.cs.uu.nl/
for an example):

- Install the latest Nix release, e.g.,

    http://nix.cs.uu.nl/dist/nix/nix-0.10.1/

  Nix should be installed in /nix (the default prefix), otherwise
  pre-built binaries cannot be used.

- Grab the services and Nixpkgs from our Subversion repository:

    $ svn co https://svn.cs.uu.nl:12443/repos/trace/services/trunk services
    $ svn co https://svn.cs.uu.nl:12443/repos/trace/nixpkgs/trunk nixpkgs

- Make sure that the services can find Nixpkgs:

    $ cd services
    $ ln -s ../nixpkgs/pkgs/ .

- To speed up building of the server (optional but recommended):

    $ nix-pull http://nix.cs.uu.nl/dist/nix/channels-v3/nixpkgs-unstable/MANIFEST

- Customise:
  
    $ cd configurations/svn-template

  Edit ./default.nix, in particular `rootDir' (specify the directory
  where you want to store the log files, repositories, user DB, etc.),
  `hostName', `httpPort', `adminAddr', and `notificationSender'.

  You'll probably also want to change the UU logo to something else.
  Just replace subversion/root/UU_merk.gif.

  (You may want to make a copy of svn-template for your local
  changes.)

- Start the test server (running on port 12081 by default):

    $ ../../upgrade-server.sh svn ./default.nix test

  This will build the server and all dependencies.  (If you've done a
  nix-pull, it will download pre-build binaries for most stuff, though
  not Apache itself since that's being pre-built yet.)  It may seem
  that a lot is being built/downloaded (it is!), but this is to ensure
  that the dependencies are exactly right.

  It will then start the server.  So make sure that it works
  (http://localhost:12081/).  In particular

    * Check that you can create users.
    * Check that you can create repositories.
    * Check that checkouts works.
    * Check that ViewCVS works.

  Every time you make a change to the configuration of the server,
  re-run the command above to rebuild and restart the service.

- Set a password for the `root' user:

    $ /nix/var/nix/profiles/svn-test-server/bin/resetpw.pl root PASSWORD

- Start the production server (running on port 12080 by default):

    $ ../../upgrade-server.sh svn ./default.nix production

  It is usually a good idea to upgrade the test server before
  upgrading the production server.

- To stop either server:

    $ /nix/var/nix/profiles/svn-(test|production)-server/bin/control stop

- To start either server:

    $ /nix/var/nix/profiles/svn-(test|production)-server/bin/control start

- To roll back:

    $ /nix/var/nix/profiles/svn-(test|production)-server/bin/control stop
    $ nix-env -p /nix/var/nix/profiles/svn-(test|production)-server --rollback 
    $ /nix/var/nix/profiles/svn-(test|production)-server/bin/control start

  (Or use --switch-generation instead of --rollback to go to a
  specific generation.)


There are some utility commands in
/nix/var/nix/profiles/svn-(test|production)-server/bin:

* `resetpw.pl USERNAME PASSWORD' resets a user's password.

* `delete-repo.pl TRASH REPONAMES...' moves the specified repositories
  to the directory TRASH.

* `delete-user.pl USERNAME' deletes a user, after checking that the
  user no longer is the owner of any repository and does not occur in
  any ACL.


Some operations don't have a utility, but can be accomplished by
editing the database tables directly:

* To change the owner of a repository:

    $ db_load -t hash -T .../repodb/svn-owners
    REPONAME
    OWNER

* To make a repository hidden from the index:

    $ db_load -t  hash -T .../repodb/svn-hidden-repos
    REPONAME
    1

  (Or "" instead of "1" to make it visible again.)
